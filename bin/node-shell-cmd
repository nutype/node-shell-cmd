#!/usr/bin/env node
(function() {
"use strict";

var fs = require('fs'),
    os = require('os'),
    exec = require('child_process').exec,
    platform = (function() {
        switch (os.type()) {
            case 'Windows_NT': return 'windows';
            case 'Linux': return 'linux';
        }
    })(),
    regex = {
        cmdName: /^[a-z.]+$/,
        windowsLinebreak: /\r/g,
        trailingSpaces: /\s+\n/g,
        blankLine: /^\s*$/,
        backslash: /\\/g,
        lsblkDiskInfo: /^\s+SIZE\s+STATE\s+PHY-SEC/
    },
    cmds = {};
    
function bugOut(msg) {
    console.error(msg);
    console.trace();
    process.exit(1);
}

function validCommand(cmd) {
    return typeof cmd === 'string' &&
        cmds.hasOwnProperty(cmd);
}

function execCommand(cmd, callback, callbackError) {
    exec(cmd, function(err, stdout, stderr) {
        if (err !== null ||
            stderr.length > 0) {
            callbackError({
                err: err,
                code: err.code,
                signal: err.signal,
                stderr: stderr
            });
        } else {
            callback(stdout);
        }
    });
}

function stdoutToArray(stdout, filters) {
    filters = (Array.isArray(filters) ? filters : []);
    
    return stdout.replace(regex.windowsLinebreak, '')
                 .replace(regex.trailingSpaces, '\n')
                 .split('\n')
                 .filter(function(line) {
                    return !regex.blankLine.test(line) &&
                        !filters.some(function(f) {
                            return f.test(line);
                        });
                 });
}


if (process.argv.length < 3) {
    bugOut('Must provide at least one command name');
}

// pipe: [[cmd, arg, ..., arg], [cmd, arg, ..., arg]]
function nextCommand(pipe, input, callback) {
    if (pipe.length > 0) { // more commands
        pipe[0][0](
            pipe[0][1], // args
            input, // input
            function (output, err) { // callback
                if (err) {
                    bugOut(output);
                } else {
                    nextCommand(pipe.slice(1), output, callback);
                }
            });
    } else { // last command
        callback(input);
    }
}

function showHelp(cmd) {
    console.log('Command:\n\t' + cmd + '\n\n' +
        'Description:\n\t' + cmds[cmd].desc + '\n\n' +
        'Requires Input:\n\t' + cmds[cmd].requiresInput);
    
    process.exit(0);
}

function buildPipe(args) {
    var pipe = [],
        cmdIdx;
        
    if (args.length === 1) {
        pipe.push([args[0]]);
    }
        
    args.reduce(function(prev, curr) {
        if (prev === '_' &&
            curr === '_') {
            return curr;
        } else {
            if (prev === '_') {
                cmdIdx = pipe.push([curr]) - 1;
            } else if (curr !== '_') {
                if (typeof cmdIdx === 'number') {
                    pipe[cmdIdx].push(curr);
                } else {
                    cmdIdx = pipe.push([prev, curr]) - 1;
                }
            } else if (typeof cmdIdx !== 'number') {
                cmdIdx = pipe.push([prev]) - 1;
            }
            
            return curr;
        }
    });
    
    return pipe.map(function(cmd, idx) {
        var cmdName = cmd[0],
            cmdFn,
            args,
            input;
        
        if (!validCommand(cmdName)) {
            bugOut('Invalid command name "' + cmdName + '"');
        } else if (cmds[cmdName].cmd.hasOwnProperty('all')) {
            cmdFn = cmds[cmdName].cmd.all;
        } else if (!cmds[cmdName].cmd.hasOwnProperty(platform)) {
            bugOut('The command "' + cmdName + '" is not ' +
                'supported on the "' + platform + '" platform');
        } else {
            cmdFn = cmds[cmdName].cmd[platform];
        }
        
        var cmdInput = cmds[cmdName].input,
            cmdArg = cmds[cmdName].arg,
            cmdArgs = cmds[cmdName].args;
        
        if (cmd[1] === 'help') {
            showHelp(cmdName);
        } else if (idx === 0) { // first command
            if (cmd.length === 1) {
                if (!!cmdInput) {
                    bugOut('The command "' + cmdName + '" requires a "' +
                        cmds[cmdName].input.type + '" input');
                }
                
                return [cmdFn, undefined, undefined];
            } else if (cmd.length === 2) {
                if (!!cmdArg &&
                    !!cmdArg.required) {
                    bugOut('The command "' + cmdName + '" requires a single "' +
                        cmdArg.type + '" argument');
                } else if (!!cmdArgs &&
                    Object.keys(cmdArgs).some(function(arg) {
                        return !!cmdArgs[arg].required;
                    })) {
                    bugOut('The command "' + cmdName + '" requires one or more ' +
                        'arguments specified as a JSON object.  Example: ' +
                        '\'{"arg1": "arg1 value", "arg2": true}\'');
                }
                
                try {
                    input = JSON.parse(cmd[1]);
                } catch (e) {
                    bugOut('Cannot parse JSON input data for first command "' +
                        cmdName + '"');
                }
                
                if (typeof cmdInput === 'undefined') {
                    return [cmdFn, undefined, undefined];
                } else if (typeof input !== cmdInput.type) {
                    bugOut('The provided input is not of the correct input ' +
                        'type "' + cmdInput.type + '"');
                }
                
                return [cmdFn, undefined, input];
            } else {   
                try {
                    args = JSON.parse(cmd[1]);
                } catch (e) {
                    bugOut('Cannot parse arguments JSON string for command "' +
                        cmdName + '"');
                }
                
                if (!!cmdArg) {
                    if (typeof args !== cmdArg.type) {
                        bugOut('The provided single argument is not of the correct ' +
                            'type "' + cmdArg.type + '"');
                    }
                } else if (!!cmdArgs) {
                    if (typeof args !== 'object') {
                        bugOut('The command "' + cmdName + '" requires an ' +
                            'arguments object');
                    } else {
                        Object.keys(cmdArgs).forEach(function(arg) {
                            if (!!cmdArgs.require &&
                                !args.hasOwnProperty(arg)) {
                                bugOut('The command "' + cmdName + '" requires the "' +
                                    arg + '" argument specified in a JSON object');
                            }
                        });
                        
                        Object.keys(args).forEach(function(arg) {
                            if (!cmdArgs.hasOwnProperty(arg)) {
                                bugOut('The command "' + cmdName + '" does not ' +
                                    'an accept an argument of "' + arg + '"');
                            } else if (typeof args[arg] !== cmdArgs[arg].type) {
                                bugOut('The command "' + cmdName + '" was provided ' +
                                    'with an invalid value for the "' + arg +
                                    '" argument');
                            }
                        });
                    }
                } else {
                    args = undefined;
                }
                
                try {
                    input = JSON.parse(cmd[2]);
                } catch (e) {
                    bugOut('Cannot parse JSON input data for first command "' +
                        cmdName + '"');
                }
                
                if (typeof cmdInput === 'undefined') {
                    return [cmdFn, args, undefined];
                } else if (typeof input !== cmdInput.type) {
                    bugOut('The provided input is not of the correct input ' +
                        'type "' + cmdInput.type + '"');
                }
                
                return [cmdFn, args, input];
            }
        } else { // additional command
            if (cmd.length === 1) {
                if (!!cmdArg &&
                    !!cmdArg.required) {
                    bugOut('The command "' + cmdName + '" requires a single "' +
                        cmdArg.type + '" argument');
                } else if (!!cmdArgs &&
                    Object.keys(cmdArgs).some(function(arg) {
                        return !!cmdArgs[arg].required;
                    })) {
                    bugOut('The command "' + cmdName + '" requires one or more ' +
                        'arguments specified as a JSON object.  Example: ' +
                        '\'{"arg1": "arg1 value", "arg2": true}\'');
                }
                
                return [cmdFn, undefined, undefined];
            } else {
                try {
                    args = JSON.parse(cmd[1]);
                } catch (e) {
                    bugOut('Cannot parse arguments JSON object for command "' +
                        cmdName + '"');
                }
                
                if (!!cmdArg) {
                    if (typeof args !== cmdArg.type) {
                        bugOut('The provided single argument is not of the correct ' +
                            'type "' + cmdArg.type + '"');
                    }
                } else if (!!cmdArgs) {
                    if (typeof args !== 'object') {
                        bugOut('The command "' + cmdName + '" requires an ' +
                            'arguments object');
                    } else {
                        Object.keys(cmdArgs).forEach(function(arg) {
                            if (!!cmdArgs.require &&
                                !args.hasOwnProperty(arg)) {
                                bugOut('The command "' + cmdName + '" requires the "' +
                                    arg + '" argument specified in a JSON object');
                            }
                        });
                        
                        Object.keys(args).forEach(function(arg) {
                            if (!cmdArgs.hasOwnProperty(arg)) {
                                bugOut('The command "' + cmdName + '" does not ' +
                                    'an accept an argument of "' + arg + '"');
                            } else if (typeof args[arg] !== cmdArgs[arg].type) {
                                bugOut('The command "' + cmdName + '" was provided ' +
                                    'with an invalid value for the "' + arg +
                                    '" argument');
                            }
                        });
                    }
                } else {
                    args = undefined;
                }
                
                return [cmdFn, args, undefined];
            }
        }
    });
}

    cmds['arr.first'] = {
        desc: 'Returns the first value in an array. If you are ' +
            'supplying the array on the command line, then it must be ' +
            'single-quoted and use JSON syntax',
        input: {
            type: 'array',
            desc: 'The input array'
        },
        cmd: {
            all: function(args, input, callback) {
                callback(input[0]);
            }
        }
    };
    cmds['arr.last'] = {
        desc: 'Returns the last value in an array. If you are ' +
            'supplying the array on the command line, then it must be ' +
            'single-quoted and use JSON syntax',
        input: {
            type: 'array',
            desc: 'The input array'
        },
        cmd: {
            all: function(args, input, callback) {
                callback(input[input.length - 1]);
            }
        }
    };
    cmds['arr.length'] = {
        desc: 'Returns the length of an array. If you are ' +
            'supplying the array on the command line, then it must be ' +
            'single-quoted and use JSON syntax',
        input: {
            type: 'array',
            desc: 'The input array'
        },
        cmd: {
            all: function(args, input, callback) {
                callback(input.length);
            }
        }
    };
    cmds['disk.info'] = {
        desc: 'Gets detailed information for a particular disk.',
        input: {
            type: 'string',
            desc: 'The /dev path in Linux and the \\\\.\\DISKDRIVE name in Windows'
        },
        cmd: {
            linux: function(args, input, callback) {
                cmds['is.blockDev'].cmd.all(null, input, function(isBlockDev) {
                    if (isBlockDev) {
                        // num sectors: blockdev --getsize /dev/sda (requires root)
                        execCommand('udevadm info -q property -n ' + input + ' && ' +
                            'lsblk -l -b -d -o SIZE,STATE,PHY-SEC ' + input,
                            function(stdout) {
                                var obj = {};
                                stdout.split('\n').forEach(function(kv, idx, arr) {
                                    var pair = kv.split('=');
                                    
                                    switch (pair[0]) {
                                        case 'DEVNAME': obj.devName = pair[1]; break;
                                        case 'ID_VENDOR': obj.manf = pair[1]; break;
                                        case 'ID_MODEL': obj.model = pair[1]; break;
                                        case 'ID_PATH': obj.devID = '/dev/disk/by-path/' + pair[1]; break;
                                    }
                                    
                                    if (regex.lsblkDiskInfo.test(kv)) {
                                        var lsblk = arr[idx + 1].split(' ').filter(function(result) {
                                            return result.length > 0;
                                        });
                                        
                                        obj.rawSizeInBytes = parseInt(lsblk[0], 10);
                                        
                                        if (lsblk[1] === 'running') {
                                            obj.status = 'online';
                                        } else {
                                            obj.status = 'offline';
                                        }
                                        
                                        obj.sectorSizeInBytes = parseInt(lsblk[2], 10);
                                    }
                                });
                                
                                callback(obj);
                            },
                            function (err) {
                                callback('Cannot execute disk.info command', true);
                            });
                    } else {
                        callback('The device "' + input + '" is not ' +
                            'a block device', true);
                    }
                });
            },
            windows: function(args, input, callback) {
                execCommand('wmic diskdrive where DeviceID="' +
                    input.replace(regex.backslash, '\\\\') + '" list/format:value',
                    function(stdout) {
                        var obj = {};
                        stdout.replace(regex.windowsLinebreak, '').split('\n').filter(function(kv) {
                            return kv.length > 0;
                        }).forEach(function(kv) {
                            var pair = kv.split('=');
                            switch (pair[0]) {
                                case 'DeviceID':
                                    obj.devID = pair[1];
                                    obj.devName = pair[1];
                                    break;
                                case 'Manufacturer': obj.manf = pair[1]; break;
                                case 'Model': obj.model = pair[1]; break;
                                case 'BytesPerSector': obj.sectorSizeInBytes = parseInt(pair[1], 10); break;
                                case 'Status':
                                    if (pair[1] === 'OK') {
                                        obj.status = 'online';
                                    } else {
                                        obj.status = 'offline';
                                    }
                                    break;
                                case 'Size': obj.rawSizeInBytes = parseInt(pair[1], 10); break;
                            }
                        });
                        
                        execCommand('wmic class Win32_LogicalDiskToPartition',
                            function(stdout) {
                                //console.log(stdout);
                                //console.dir(xml2js(stdout.replace(regex.windowsLinebreak, '')));
                                
                                callback(obj);
                            },
                            function(err) {
                                callback('Cannot execute disk.info command', true);
                            });
                    }, function(err) {
                        callback('Cannot execute disk.info command', true);
                    });
            }
        }
    };
cmds['disks.all.list'] = {
    desc: 'Lists all disks (e.g. SAN, local hard disk, ' +
            'USB, etc.). by their device ID.\n' +
            'On Linux, this would be something like /dev/disk/by-path/...\n' +
            'On Windows, this is the DISKDRIVE device ID.\n\n' +
            'Use cdrom.list to get the device IDs for all attached ' +
            'CD/DVD-ROM devices.',
    cmd: {
        linux: function(args, input, callback) {
            execCommand('for disk in ' +
                '$(ls /dev/disk/by-path/ | egrep -v part); do ' +
                'if ! udevadm info -q property -n ' +
                '/dev/disk/by-path/$disk | egrep -q \'^ID_CDROM=1$\'; ' +
                'then echo /dev/disk/by-path/$disk; fi; done',
                function(stdout) {
                    callback(stdoutToArray(stdout));
                },
                function(err) {
                    callback('Cannot execute disks.all.list command', true);
                });
        },
        windows: function(args, input, callback) {
            execCommand('wmic diskdrive get deviceid',
                function(stdout) {
                    callback(stdoutToArray(stdout, [/^DeviceID/]));
                },
                function(err) {
                    callback('Cannot execute disks.all.list command', true);
                });
        }
    }
};
    cmds['is.blockDev'] = {
        desc: 'Determines if the provided input is a valid block device.',
        input: {
            type: 'string',
            desc: 'The /dev path in Linux'
        },
        cmd: {
            all: function (args, input, callback) {
                fs.stat(input, function(err, stats) {
                    if (err !== null) {
                        callback('Error performing a stat on "' + input + '"\n' +
                            'err: ' + err, true);
                    } else {
                        callback(stats.isBlockDevice());
                    }
                });
            }
        }
    };
    cmds['is.charDev'] = {
        desc: 'Determines if the provided input is a valid character device.',
        input: {
            type: 'string',
            desc: 'The /dev path in Linux'
        },
        cmd: {
            all: function (args, input, callback) {
                fs.stat(input, function(err, stats) {
                    if (err !== null) {
                        callback('Error performing a stat on "' + input + '"\n' +
                            'err: ' + err, true);
                    } else {
                        callback(stats.isCharacterDevice());
                    }
                });
            }
        }
    };
    cmds['is.dir'] = {
        desc: 'Determines if the provided input is a valid directory',
        input: {
            type: 'string',
            desc: 'The absolute or relative path to a directory'
        },
        cmd: {
            all: function (args, input, callback) {
                fs.stat(input, function(err, stats) {
                    if (err !== null) {
                        callback('Error performing a stat on "' + input + '"\n' +
                            'err: ' + err, true);
                    } else {
                        callback(stats.isDirectory());
                    }
                });
            }
        }
    };
    cmds['is.fifo'] = {
        desc: 'Determines if the provided input is a valid FIFO.',
        input: {
            type: 'string',
            desc: 'The /dev path in Linux'
        },
        cmd: {
            all: function (args, input, callback) {
                fs.stat(input, function(err, stats) {
                    if (err !== null) {
                        callback('Error performing a stat on "' + input + '"\n' +
                            'err: ' + err, true);
                    } else {
                        callback(stats.isFIFO());
                    }
                });
            }
        }
    };
    cmds['is.file'] = {
        desc: 'Determines if the provided input is a valid regular file.',
        input: {
            type: 'string',
            desc: 'The absolute or relative path to a regular file'
        },
        cmd: {
            all: function (args, input, callback) {
                fs.stat(input, function(err, stats) {
                    if (err !== null) {
                        callback('Error performing a stat on "' + input + '"\n' +
                            'err: ' + err, true);
                    } else {
                        callback(stats.isFile());
                    }
                });
            }
        }
    };
    cmds['is.root'] = {
        desc: 'Determines if you are root.',
        cmd: {
            linux: function(args, input, callback) {
                callback(process.getuid() === 0);
            }
        }
    };
    cmds['is.socket'] = {
        desc: 'Determines if the provided input is a valid socket.',
        input: {
            type: 'string',
            desc: 'The socket path'
        },
        cmd: {
            all: function (args, input, callback) {
                fs.stat(input, function(err, stats) {
                    if (err !== null) {
                        callback('Error performing a stat on "' + input + '"\n' +
                            'err: ' + err, true);
                    } else {
                        callback(stats.isSocket());
                    }
                });
            }
        }
    };
    cmds['is.symlink'] = {
        desc: 'Determines if the provided input is a valid symbolic link.',
        input: {
            type: 'string',
            desc: 'The absolute or relative path to a symlink'
        },
        cmd: {
            all: function (args, input, callback) {
                fs.lstat(input, function(err, stats) {
                    if (err !== null) {
                        callback('Error performing a stat on "' + input + '"\n' +
                            'err: ' + err, true);
                    } else {
                        callback(stats.isSymbolicLink());
                    }
                });
            }
        }
    };
    cmds['obj.prop'] = {
        desc: 'Returns the value for a particular property inside an object.  You need to provide a property name as a JSON string like so: \'"propertyName"\'.',
        input: {
            type: 'object',
            desc: 'The input data can be any valid object'
        },
        arg: {
            type: 'string',
            desc: 'The property inside the input data object to retrieve the ' +
                'value of',
            required: true
        },
        cmd: {
            all: function(args, input, callback) {
                callback(input[args]);
            }
        }
    };

var origPipe = buildPipe(process.argv.slice(2));

if (origPipe.length === 0) {
    bugOut('Invalid command string specified');
} else {
    nextCommand(origPipe, origPipe[0][2], function(obj) {
        console.log(JSON.stringify(obj));
    });
}
})();